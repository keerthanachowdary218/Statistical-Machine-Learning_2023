# -*- coding: utf-8 -*-
"""Convolution2dRGB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qXOHANTJtSsoPu8cMXNySOm8N_ZRjm2E
"""

import numpy as np

def convolution_2d_rgb(I, G, s):
    # I is the input RGB image with shape (W, H, 3)
    # G is the filter with shape (w, h, 3)
    # s is the stride

    # Get dimensions
    W, H, _ = I.shape
    w, h, _ = G.shape

    # Calculate the dimensions of the output
    output_W = 1 + (W - w) // s
    output_H = 1 + (H - h) // s
    print(output_W,output_H)
    # Initialize the output with zeros
    output = np.zeros((output_W, output_H, 3))

    # Iterate over the output pixels
    for x in range(output_W):
        for y in range(output_H):
            # Compute the starting position in the input image

            start_x = x * s
            start_y = y * s
            print(start_x,start_y)
            # Perform the convolution for each channel (r, g, b)
            for c in range(3):
                # Extract the corresponding region from the input image
                input_region = I[start_x:start_x + w, start_y:start_y + h, c]

                # Example: Multiply the filter with the input region and sum the result
                output[x, y, c] = np.sum(input_region * G[:, :, c])

    return output

# Example usage:
# Assuming I is an RGB image and G is a filter
I = np.random.rand(10, 10, 3)  # Example input image
G = np.random.rand(3, 3, 3)    # Example filter
s = 2                          # Example stride

result = convolution_2d_rgb(I, G, s)
print(result)